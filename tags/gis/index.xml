<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gis on INBO Tutorials</title>
    <link>/tags/gis/</link>
    <description>Recent content in gis on INBO Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="/tags/gis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Algorithmic Approach to Variograms</title>
      <link>/tutorials/spatial_variograms/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_variograms/</guid>
      <description>Introduction  Everything is related to everything else, but near things are more related than distant things.
 (First Law according to Waldo Tobler)
This remarkably unquantitative statement, or &amp;ldquo;law&amp;rdquo;, is described on wikipedia as &amp;ldquo;a direct product of the quantitative revolution&amp;rdquo; in Geography. Contrast it with the wikipedia article on variograms, which is full of jargon and seemingly complicated equations.
With this tutorial, I would like to document the condensed essence of my own trials and misunderstandings with practical variogram-based analysis.</description>
    </item>
    
    <item>
      <title>The UTM grid and the MGRS grid: not quite the same</title>
      <link>/articles/spatial_mgrs/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/articles/spatial_mgrs/</guid>
      <description>Summary Grids are widely used in biodiversity monitoring to define the basic spatial units for data collection, data processing or mapping. In this post I explain differences between the UTM and MGRS grids, provide references to their full definition and refer to some software implementations for MGRS.
Main points:
 The UTM grid and the MGRS grid outside the polar regions are both derived from the UTM (Universal Transverse Mercator) map projection system.</description>
    </item>
    
    <item>
      <title>Using WFS services in R</title>
      <link>/tutorials/spatial_wfs_services/</link>
      <pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_wfs_services/</guid>
      <description>What is WFS? In computing, the Open Geospatial Consortium (OGC) Web Feature Service (WFS) Interface Standard provides an interface allowing requests for geographical features across the web using platform-independent calls. One can think of geographical features as the “source code” behind a map, whereas the Web Mapping Service (WMS) interface or online tiled mapping portals like Google Maps return only an image, which end-users cannot edit or spatially analyze.
The standard output format for reading or downloading data from a WFS is the XML-based Geography Markup Language (GML), but other formats like shapefiles or geojson are also available.</description>
    </item>
    
    <item>
      <title>Using WMS services in R</title>
      <link>/tutorials/spatial_wms_services/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_wms_services/</guid>
      <description>WMS stands for Web Map Service. The service provides prerendered tiles at different scales. This makes it useful to include them as background images in maps.
We will use the leaflet package to make interactive maps.
library(leaflet) First, we define some WMS URLs for Flanders and Belgium to play with:
# Flanders: wms_grb &amp;lt;- &amp;#34;https://geo.api.vlaanderen.be/GRB-basiskaart/wms&amp;#34; wms_ortho &amp;lt;- &amp;#34;https://geo.api.vlaanderen.be/OMWRGBMRVL/wms&amp;#34; wms_inbo &amp;lt;- &amp;#34;https://geo.api.vlaanderen.be/INBO/wms&amp;#34; wms_hunting &amp;lt;- &amp;#34;https://geo.api.vlaanderen.be/Jacht/wms&amp;#34; # Belgium: wms_cartoweb_be &amp;lt;- &amp;#34;https://cartoweb.wms.ngi.be/service&amp;#34; wms_ortho_be &amp;lt;- &amp;#34;https://wms.</description>
    </item>
    
    <item>
      <title>Coordinate operations and maps in R</title>
      <link>/tutorials/spatial_transform_crs_2/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_transform_crs_2/</guid>
      <description>Introduction and setup This tutorial originated while preparing an R-demonstration during a GIS club at INBO on 16 September 2021. (Further material of the GIS club is available here.)
A straightforward approach for transforming spatial data is available in another tutorial. The current tutorial tackles a few extra aspects.
The tutorial assumes you have some pre-existing knowledge:
 Basic knowledge about coordinate reference systems (CRSs) and geodetic datums; see another tutorial and the references and links therein.</description>
    </item>
    
    <item>
      <title>Goodbye PROJ.4! How to specify a coordinate reference system in R?</title>
      <link>/tutorials/spatial_crs_coding/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_crs_coding/</guid>
      <description>Coordinate reference systems: minimal background What? A coordinate reference system (CRS) – also called spatial reference system (SRS) – is what you need if you want to interpret numeric coordinates as actual point locations with reference to the Earth. Two types of coordinate reference system are much used in spatial science: geodetic and projected CRSs. The former serve only to locate coordinates relative to a 3D model of the Earth surface, while the latter add a projection to generate coordinates on a 2D map.</description>
    </item>
    
    <item>
      <title>How to use open raster file formats in R: GeoTIFF &amp; GeoPackage</title>
      <link>/tutorials/spatial_standards_raster/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_standards_raster/</guid>
      <description>During the current transition period of supporting both old and new PROJ/GDAL, you may get a decent portion of proj4string-related warnings when running the below code, but you can safely ignore them. For more information, see the CRS tutorial.
This tutorial uses a few basic functions from the dplyr and raster packages. While only a few functions are used, you can use the previous hyperlinks to access the tutorials (vignettes) of these packages for more functions and information.</description>
    </item>
    
    <item>
      <title>Transforming spatial objects</title>
      <link>/tutorials/spatial_transform_crs/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_transform_crs/</guid>
      <description>General note: migration to the more actively developed sf package is currently advised by the sp maintainer. The sp package, used in this tutorial, is still maintained in order to support the newest versions of the GDAL and PROJ backends.
Sometimes we have a layer in one coordinate reference system (CRS) and need to transform it into another coordinate reference system. The first thing we need to do is identifying both coordinate reference systems.</description>
    </item>
    
    <item>
      <title>How to use open vector file formats in R: GeoPackage &amp; GeoJSON</title>
      <link>/tutorials/spatial_standards_vector/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_standards_vector/</guid>
      <description>This tutorial uses a few basic functions from the dplyr and sf packages. While only a few functions are used, you can use the previous hyperlinks to access the tutorials (vignettes) of these packages for more functions and information.
options(stringsAsFactors = FALSE) library(tidyverse) library(sf) library(inborutils) You will find a bit more background about ‘why and what’, regarding the considered open standards, in a separate post on this website.
In short, the GeoPackage and GeoJSON formats are ideal for exchange, publication, interoperability &amp;amp; durability and to open science in general.</description>
    </item>
    
    <item>
      <title>Meet some popular open geospatial standards!</title>
      <link>/articles/geospatial_standards/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/geospatial_standards/</guid>
      <description>Some inspiration for this post came from the beautiful books of Lovelace et al. (2020), Pebesma &amp;amp; Bivand (2019) and Hijmans (2019), and from various websites.
Why use open standards?  Open file standards ease collaboration, portability and compatibility between users, machines and applications. Their (file) structure is fully documented.  Consequently, scientists and programmers can build new software / packages and make innovations that use these standards, while maintaining interoperability with existing applications.</description>
    </item>
    
    <item>
      <title>How to make spatial joins (point in polygon)?</title>
      <link>/tutorials/spatial_point_in_polygon/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_point_in_polygon/</guid>
      <description>library(R.utils) library(rgdal) library(tidyverse) library(leaflet) library(sp) library(sf) library(rgbif) library(DBI) What we want to do In this short tutorial, we explore various options to deal with the situation where we have (1) a spatially referenced GIS file with polygons and (2) a spatially referenced set of points that overlaps with the GIS polygons.
Typically, both data sources contain information (apart from the spatial locations) that needs to be related to each other in some way.</description>
    </item>
    
    <item>
      <title>Let&#39;s create an interactive map!</title>
      <link>/tutorials/spatial_create_leaflet_map/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/spatial_create_leaflet_map/</guid>
      <description>General note: migration to the more actively developed sf package is currently advised by the sp maintainer. The sp package, used in this tutorial, is still maintained in order to support the newest versions of the GDAL and PROJ backends.
Introduction The required packages are leaflet and sp.
library(leaflet) library(sp) Dummy data Let’s create a dummy data.frame to play around, i.e. the three locations of INBO:
names &amp;lt;- c(&amp;#34;VAC HT&amp;#34;, &amp;#34;Geraardsbergen&amp;#34;, &amp;#34;Linkebeek&amp;#34;) lat &amp;lt;- c(50.</description>
    </item>
    
  </channel>
</rss>
